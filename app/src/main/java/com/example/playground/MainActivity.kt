package com.example.playground

import android.content.res.Configuration
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)


        /**
         * When you set android:configChanges="orientation" the activity not be recreated when the
         * screen is rotated.
         * IMPORTANT: You you have alternative resources for to be loaded when the configuration
         * changes, you will have to load these resources on your own. The UI will not be
         * auto generated by the onCreate method.
         *
         * To be able to access the new configuration use override the onConfigurationChanged()
         * When it is called, it receives a new instance of the Configuration class.
         *
         * You can also access the current Configuration through the resources instance as shown
         * below:
         */
        val configuration: Configuration = resources.configuration
        Log.d("Configuration onCreate:", configuration.toString())
    }

    /**
     * This method will be called only if you set any android:configChanges for this activity in
     * the Manifest file.
     *
     * The Configuration object represents all of the current configurations, not just the ones
     * that have changed.
     *
     * Notice that the values from the Configuration fields are integers that are matched to
     * specific constants from the Configuration class. For documentation about which constants
     * to use with each field, refer to the appropriate field in the Configuration reference.
     * https://developer.android.com/reference/android/content/res/Configuration
     */
    override fun onConfigurationChanged(newConfig: Configuration) {
        super.onConfigurationChanged(newConfig)
        Log.d("-->locales", newConfig.locales.toString())
        Log.d("-->layoutDirection", newConfig.layoutDirection.toString())
        Log.d("-->densityDpi", newConfig.densityDpi.toString())
        Log.d("-->orientation", newConfig.orientation.toString())
        Log.d("-->screenHeightDp", newConfig.screenHeightDp.toString())
        Log.d("-->screenWidthDp", newConfig.screenWidthDp.toString())

        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            Toast.makeText(this, "LANDSCAPE", Toast.LENGTH_SHORT).show()
        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT) {
            Toast.makeText(this, "PORTRAIT", Toast.LENGTH_SHORT).show()
        }
        /** From Official docs:
         * See: https://developer.android.com/guide/topics/resources/runtime-changes
         *
         * Remember: When you declare your activity to handle a configuration change, you are
         * responsible for resetting any elements for which you provide alternatives.
         * If you declare your activity to handle the orientation change and have images that
         * should change between landscape and portrait, you must re-assign each resource to
         * each element during onConfigurationChanged().
         *
         * If you don't need to update your application based on these configuration changes, you
         * can instead not implement onConfigurationChanged(). In which case, all of the resources
         * used before the configuration change are still used and you've only avoided the restart
         * of your activity. However, your application should always be able to shutdown and restart
         * with its previous state intact, so you should not consider this technique an escape from
         * retaining your state during normal activity lifecycle. Not only because there are other
         * configuration changes that you cannot prevent from restarting your application, but also
         * because you should handle events such as when the user leaves your application and it
         * gets destroyed before the user returns to it.
         *
         */
    }
}
